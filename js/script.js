document.addEventListener("DOMContentLoaded", () => {
  let allWords = [];
  let currentCategory = "all"; // –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

  const searchInput = document.querySelector(".search-input");
  const searchButton = document.querySelector(".search-button");
  const categoryButton = document.getElementById("categoryButton");
  const categoryOptions = document.getElementById("categoryOptions");
  const mainContainer = document.querySelector(".main");

fetch("data/words.json")
  .then(res => {
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${res.status}`);
    return res.json();
  })
  .then(data => {
    allWords = data;
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allWords.length} —Å–ª–æ–≤`);
  })
  .catch(error => {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞:", error);
  });


  window.addEventListener("hashchange", handleHash);

  function handleHash() {
    const key = decodeURIComponent(location.hash.slice(1)).toLowerCase();
    if (!key) return clearMain();

    const word = allWords.find(w => w.word.toLowerCase() === key);
    if (word) {
      displayWord(word);
    } else {
      showNotFound(key);
    }
  }

  function clearMain() {
    if (mainContainer) mainContainer.innerHTML = "";
  }

  function displayWord(word) {
    if (!mainContainer) return;

    const examplesHtml = word.definitions.map(def => 
      <div>
        <p><strong>${def.meaning}</strong></p>
        <ul>
          ${def.examples.map(ex => <li>üí¨ ${ex}</li>).join("")}
        </ul>
      </div>
    ).join("");

    mainContainer.innerHTML = 
      <div class="card large">
        <h2>${word.word}</h2>
        <p class="definition">${word.definition}</p>
        <h3>–ü—Ä–∏–º–µ—Ä—ã:</h3>
        ${examplesHtml}
        <a class="more-link back-to-list" href="#">–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É</a>
      </div>
    ;

    document.querySelector(".back-to-list").addEventListener("click", (e) => {
      e.preventDefault();
      history.replaceState(null, "", " ");
      clearMain();
      renderCategory(currentCategory); // ‚Üê —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    });
  }

  function showNotFound(term) {
    if (!mainContainer) return;
    mainContainer.innerHTML = 
      <div class="error">
        <h2>–°–ª–æ–≤–æ ¬´${term}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h2>
        <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ <a href="#">–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>.</p>
      </div>
    ;
  }

  function renderCategory(category) {
    if (!mainContainer) return;

    const filtered = category === "all"
      ? allWords
      : allWords.filter(w => w.category === category);

    if (filtered.length === 0) {
      mainContainer.innerHTML = 
        <div class="word-not-found">
          <h2>–ù–µ—Ç —Å–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.</p>
        </div>
      ;
      return;
    }

    mainContainer.innerHTML = filtered.map(word => 
      <div class="card small">
        <p class="card-label">${categoryLabel(word.category)}</p>
        <h2 class="word-title">${word.word}</h2>
        <p class="definition">${word.definition}</p>
        <a class="more-link" href="#${encodeURIComponent(word.word)}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
      </div>
    ).join("");
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  categoryButton.addEventListener("click", () => {
    categoryOptions.classList.toggle("visible");
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  document.querySelectorAll("#categoryOptions button").forEach(btn => {
    btn.addEventListener("click", () => {
      const value = btn.value;
      currentCategory = value;

      renderCategory(value);
      history.replaceState(null, "", " ");

      searchInput.placeholder = value === "all"
        ? "–ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ..."
        : üîç –ü–æ–∏—Å–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryLabel(value)};

      categoryOptions.classList.remove("visible");
    });
  });

  // –ü–æ–∏—Å–∫
  searchButton.addEventListener("click", () => {
    const term = searchInput.value.trim().toLowerCase();
    const match = allWords.find(w =>
      (currentCategory === "all" || w.category === currentCategory) &&
      w.word.toLowerCase() === term
    );

    if (match) {
      location.hash = #${encodeURIComponent(match.word)};
      removeSuggestions();
    } else {
      showNotFound(term);
    }
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏
  searchInput.addEventListener("input", () => {
    const term = searchInput.value.trim().toLowerCase();
    if (term.length < 2) return removeSuggestions();

    const suggestions = allWords
      .filter(w =>
        (currentCategory === "all" || w.category === currentCategory) &&
        w.word.toLowerCase().includes(term)
      )
      .slice(0, 5);

    showSuggestions(suggestions);
  });

  function showSuggestions(words) {
    removeSuggestions();

    const list = document.createElement("div");
    list.className = "suggestions";
    Object.assign(list.style, {
      position: "absolute",
      top: "100%",
      left: "0",
      right: "0",
      background: "white",
      border: "1px solid #ccc",
      borderRadius: "8px",
      zIndex: "10",
      maxHeight: "200px",
      overflowY: "auto",
      boxShadow: "0 4px 20px rgba(0,0,0,0.1)"
    });

    words.forEach(word => {
      const item = document.createElement("div");
      item.textContent = word.word;
      Object.assign(item.style, {
        padding: "10px 16px",
        cursor: "pointer",
        transition: "background 0.2s"
      });
      item.addEventListener("mouseover", () => item.style.background = "#f2f2f2");
      item.addEventListener("mouseout", () => item.style.background = "white");
      item.addEventListener("click", () => {
        searchInput.value = word.word;
        location.hash = #${encodeURIComponent(word.word)};
        removeSuggestions();
      });
      list.appendChild(item);
    });

    document.querySelector(".search-input-wrapper").appendChild(list);
  }

  function removeSuggestions() {
    const existing = document.querySelector(".suggestions");
    if (existing) existing.remove();
  }

  function categoryLabel(cat) {
    switch (cat) {
      case "emotion": return "üòä –≠–º–æ—Ü–∏–∏";
      case "social": return "üí¨ –û–±—â–µ–Ω–∏–µ";
      case "character": return "üë§ –û—Ç–Ω–æ—à–µ–Ω–∏—è";
      case "status": return "‚≠ê –û—Ü–µ–Ω–∫–∞";
      default: return cat;
    }
  }
});
